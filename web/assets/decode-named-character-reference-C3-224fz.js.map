// Copyright James Burvel O’Callaghan III
// President Citibank Demo Business Inc.

{"version":3,"file":"decode-named-character-reference-C3-224fz.js","sources":["../../node_modules/decode-named-character-reference/index.dom.js"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n"],"names":["element","decodeNamedCharacterReference","value","characterReference","character"],"mappings":"AAIA,MAAMA,EAAU,SAAS,cAAc,GAAG,EAMnC,SAASC,EAA8BC,EAAO,CACnD,MAAMC,EAAqB,IAAMD,EAAQ,IACzCF,EAAQ,UAAYG,EACpB,MAAMC,EAAYJ,EAAQ,YAQ1B,OAGEI,EAAU,WAAWA,EAAU,OAAS,CAAC,IAAM,IAC/CF,IAAU,QASLE,IAAcD,EAPZ,GAOyCC,CACpD","x_google_ignoreList":[0]}