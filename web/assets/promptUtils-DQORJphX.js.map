{"version":3,"file":"promptUtils-DQORJphX.js","sources":["../../hooks/useAiPersonalities.ts","../../utils/promptUtils.ts"],"sourcesContent":["import { useLocalStorage } from './useLocalStorage.ts';\nimport type { SystemPrompt } from '../types.ts';\n\nconst defaultPersonalities: SystemPrompt[] = [\n    {\n        id: '1',\n        name: 'Default Reviewer',\n        persona: 'You are a senior software engineer performing a code review. You are meticulous, helpful, and provide constructive feedback.',\n        rules: ['Be clear and concise.', 'Provide code examples for suggestions.', 'Explain the \"why\" behind your suggestions.'],\n        outputFormat: 'markdown',\n        exampleIO: []\n    },\n    {\n        id: '2',\n        name: 'Sarcastic Senior Dev',\n        persona: 'You are a cynical, sarcastic, but brilliant senior software engineer. Your feedback is brutally honest and often humorous, but always technically correct.',\n        rules: ['Use a sarcastic tone.', 'Point out rookie mistakes without mercy.', 'Your code suggestions must be flawless.'],\n        outputFormat: 'markdown',\n        exampleIO: [\n            {\n                input: 'I wrote this function: `function add(a,b){return a+b}`',\n                output: 'Wow, a function that adds two numbers. Groundbreaking. Did you consider that maybe, just maybe, you should add a semicolon at the end? `function add(a, b) { return a + b; };`'\n            }\n        ]\n    }\n];\n\n\n/**\n * A custom hook to access the list of saved AI personalities.\n * @returns An array of SystemPrompt objects.\n */\nexport const useAiPersonalities = (): [SystemPrompt[], (value: SystemPrompt[] | ((val: SystemPrompt[]) => SystemPrompt[])) => void] => {\n    const [personalities, setPersonalities] = useLocalStorage<SystemPrompt[]>('devcore_ai_personalities', defaultPersonalities);\n    return [personalities, setPersonalities];\n};","import type { SystemPrompt } from '../types.ts';\n\n/**\n * Converts a structured SystemPrompt object into a single string\n * that can be used as the `systemInstruction` for the Gemini API.\n * @param prompt The SystemPrompt object.\n * @returns A formatted string representing the system prompt.\n */\nexport const formatSystemPromptToString = (prompt: SystemPrompt): string => {\n    if (!prompt) return \"You are a helpful assistant.\";\n\n    let instruction = `**PERSONA:**\\n${prompt.persona}\\n\\n`;\n\n    if (prompt.rules && prompt.rules.length > 0) {\n        instruction += `**RULES:**\\n${prompt.rules.map(rule => `- ${rule}`).join('\\n')}\\n\\n`;\n    }\n\n    if (prompt.outputFormat) {\n        instruction += `**OUTPUT FORMAT:**\\nYou must respond in ${prompt.outputFormat} format.\\n\\n`;\n    }\n\n    if (prompt.exampleIO && prompt.exampleIO.length > 0) {\n        instruction += `**EXAMPLES:**\\n`;\n        prompt.exampleIO.forEach(ex => {\n            if (ex.input && ex.output) {\n                instruction += `User Input:\\n\\`\\`\\`\\n${ex.input}\\n\\`\\`\\`\\n`;\n                instruction += `Your Output:\\n\\`\\`\\`\\n${ex.output}\\n\\`\\`\\`\\n---\\n`;\n            }\n        });\n    }\n\n    return instruction.trim();\n};"],"names":["defaultPersonalities","useAiPersonalities","personalities","setPersonalities","useLocalStorage","formatSystemPromptToString","prompt","instruction","rule","ex"],"mappings":"wCAGA,MAAMA,EAAuC,CACzC,CACI,GAAI,IACJ,KAAM,mBACN,QAAS,+HACT,MAAO,CAAC,wBAAyB,yCAA0C,4CAA4C,EACvH,aAAc,WACd,UAAW,CAAA,CAAC,EAEhB,CACI,GAAI,IACJ,KAAM,uBACN,QAAS,6JACT,MAAO,CAAC,wBAAyB,2CAA4C,yCAAyC,EACtH,aAAc,WACd,UAAW,CACP,CACI,MAAO,yDACP,OAAQ,gLAAA,CACZ,CACJ,CAER,EAOaC,EAAqB,IAAqG,CACnI,KAAM,CAACC,EAAeC,CAAgB,EAAIC,EAAgC,2BAA4BJ,CAAoB,EAC1H,MAAO,CAACE,EAAeC,CAAgB,CAC3C,EC3BaE,EAA8BC,GAAiC,CACxE,GAAI,CAACA,EAAQ,MAAO,+BAEpB,IAAIC,EAAc;AAAA,EAAiBD,EAAO,OAAO;AAAA;AAAA,EAEjD,OAAIA,EAAO,OAASA,EAAO,MAAM,OAAS,IACtCC,GAAe;AAAA,EAAeD,EAAO,MAAM,IAAIE,GAAQ,KAAKA,CAAI,EAAE,EAAE,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA,GAG9EF,EAAO,eACPC,GAAe;AAAA,sBAA2CD,EAAO,YAAY;AAAA;AAAA,GAG7EA,EAAO,WAAaA,EAAO,UAAU,OAAS,IAC9CC,GAAe;AAAA,EACfD,EAAO,UAAU,QAAQG,GAAM,CACvBA,EAAG,OAASA,EAAG,SACfF,GAAe;AAAA;AAAA,EAAwBE,EAAG,KAAK;AAAA;AAAA,EAC/CF,GAAe;AAAA;AAAA,EAAyBE,EAAG,MAAM;AAAA;AAAA;AAAA,EAEzD,CAAC,GAGEF,EAAY,KAAA,CACvB"}