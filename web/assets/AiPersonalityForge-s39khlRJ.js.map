// Copyright James Burvel Oâ€™Callaghan III
// President Citibank Demo Business Inc.

{"version":3,"file":"AiPersonalityForge-s39khlRJ.js","sources":["../../components/features/AiPersonalityForge.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SparklesIcon, PlusIcon, TrashIcon, ArrowDownTrayIcon, ArrowUpOnSquareIcon } from '../icons.tsx';\nimport { useAiPersonalities } from '../../hooks/useAiPersonalities.ts';\nimport { formatSystemPromptToString } from '../../utils/promptUtils.ts';\nimport { streamContent } from '../../services/index.ts';\nimport { downloadJson } from '../../services/fileUtils.ts';\nimport type { SystemPrompt } from '../../types.ts';\nimport { LoadingSpinner, MarkdownRenderer } from '../shared/index.tsx';\nimport { useNotification } from '../../contexts/NotificationContext.tsx';\n\nconst defaultNewPrompt: Omit<SystemPrompt, 'id' | 'name'> = {\n    persona: 'You are a helpful assistant.',\n    rules: [],\n    outputFormat: 'markdown',\n    exampleIO: [],\n};\n\nexport const AiPersonalityForge: React.FC = () => {\n    const [personalities, setPersonalities] = useAiPersonalities();\n    const [activeId, setActiveId] = useState<string | null>(null);\n    const { addNotification } = useNotification();\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    // Testbed State\n    const [testbedInput, setTestbedInput] = useState('');\n    const [chatHistory, setChatHistory] = useState<{ role: 'user' | 'model'; content: string }[]>([]);\n    const [isStreaming, setIsStreaming] = useState(false);\n\n    const activePersonality = personalities.find(p => p.id === activeId);\n\n    useEffect(() => {\n        if (!activeId && personalities.length > 0) {\n            setActiveId(personalities[0].id);\n        }\n    }, [personalities, activeId]);\n    \n    const handleUpdate = (field: keyof SystemPrompt, value: any) => {\n        if (!activePersonality) return;\n        const updated = { ...activePersonality, [field]: value };\n        setPersonalities(personalities.map(p => (p.id === activeId ? updated : p)));\n    };\n\n    const handleAddNew = () => {\n        const newId = Date.now().toString();\n        const newPersonality: SystemPrompt = { ...defaultNewPrompt, id: newId, name: 'Untitled Personality' };\n        setPersonalities([...personalities, newPersonality]);\n        setActiveId(newId);\n    };\n\n    const handleDelete = (id: string) => {\n        if (window.confirm('Are you sure you want to delete this personality?')) {\n            setPersonalities(personalities.filter(p => p.id !== id));\n            if (activeId === id) {\n                setActiveId(personalities.length > 1 ? personalities[0].id : null);\n            }\n        }\n    };\n    \n    const handleTestbedSend = async () => {\n        if (!testbedInput.trim() || !activePersonality || isStreaming) return;\n        \n        const systemInstruction = formatSystemPromptToString(activePersonality);\n        const newHistory = [...chatHistory, { role: 'user' as const, content: testbedInput }];\n        setChatHistory(newHistory);\n        setTestbedInput('');\n        setIsStreaming(true);\n\n        try {\n            const stream = streamContent(testbedInput, systemInstruction, 0.7);\n            let fullResponse = '';\n            setChatHistory(prev => [...prev, { role: 'model', content: '' }]);\n            for await (const chunk of stream) {\n                fullResponse += chunk;\n                setChatHistory(prev => {\n                    const last = prev[prev.length - 1];\n                    if (last.role === 'model') {\n                        return [...prev.slice(0, -1), { role: 'model', content: fullResponse }];\n                    }\n                    return prev;\n                });\n            }\n        } catch (e) {\n            const errorMsg = e instanceof Error ? e.message : 'An error occurred';\n            setChatHistory(prev => [...prev, { role: 'model', content: `**Error:** ${errorMsg}` }]);\n        } finally {\n            setIsStreaming(false);\n        }\n    };\n    \n    const handleExport = () => {\n        if (!activePersonality) return;\n        downloadJson(activePersonality, `${activePersonality.name.replace(/\\s+/g, '_')}.json`);\n        addNotification('Personality exported!', 'success');\n    };\n\n    const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            try {\n                const imported = JSON.parse(event.target?.result as string) as SystemPrompt;\n                // Basic validation\n                if (imported.id && imported.name && imported.persona) {\n                    setPersonalities(prev => [...prev.filter(p => p.id !== imported.id), imported]);\n                    setActiveId(imported.id);\n                    addNotification('Personality imported!', 'success');\n                } else {\n                     addNotification('Invalid personality file.', 'error');\n                }\n            } catch {\n                 addNotification('Failed to parse JSON file.', 'error');\n            }\n        };\n        reader.readAsText(file);\n    };\n\n    return (\n        <div className=\"h-full flex text-text-primary\">\n            {/* Sidebar */}\n            <aside className=\"w-64 bg-surface border-r border-border flex flex-col\">\n                <div className=\"p-4 border-b border-border\">\n                    <h2 className=\"text-lg font-bold\">Personalities</h2>\n                </div>\n                <div className=\"flex-grow overflow-y-auto\">\n                    {personalities.map(p => (\n                        <div key={p.id} onClick={() => setActiveId(p.id)} className={`group flex justify-between items-center p-3 text-sm cursor-pointer ${activeId === p.id ? 'bg-primary/10 text-primary' : 'hover:bg-gray-100 dark:hover:bg-slate-700'}`}>\n                            <span className=\"truncate\">{p.name}</span>\n                            <button onClick={(e) => { e.stopPropagation(); handleDelete(p.id)}} className=\"opacity-0 group-hover:opacity-100 text-text-secondary hover:text-red-500\"><TrashIcon /></button>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"p-4 border-t border-border space-y-2\">\n                    <button onClick={handleAddNew} className=\"btn-primary w-full py-2 text-sm flex items-center justify-center gap-2\"><PlusIcon /> New</button>\n                    <div className=\"flex gap-2\">\n                         <button onClick={() => fileInputRef.current?.click()} className=\"flex-1 py-2 text-sm bg-gray-100 dark:bg-slate-700 rounded-md flex items-center justify-center gap-2\"><ArrowUpOnSquareIcon/> Import</button>\n                         <button onClick={handleExport} className=\"flex-1 py-2 text-sm bg-gray-100 dark:bg-slate-700 rounded-md flex items-center justify-center gap-2\"><ArrowDownTrayIcon/> Export</button>\n                         <input type=\"file\" ref={fileInputRef} onChange={handleImport} accept=\".json\" className=\"hidden\"/>\n                    </div>\n                </div>\n            </aside>\n            {/* Main Content */}\n            {activePersonality ? (\n                 <div className=\"flex-1 grid grid-cols-2 gap-px bg-border\">\n                    {/* Editor */}\n                    <div className=\"bg-background p-4 flex flex-col gap-4 overflow-y-auto\">\n                        <div><label className=\"font-bold\">Name</label><input type=\"text\" value={activePersonality.name} onChange={e => handleUpdate('name', e.target.value)} className=\"w-full mt-1 p-2 bg-surface border rounded\"/></div>\n                        <div><label className=\"font-bold\">Persona</label><textarea value={activePersonality.persona} onChange={e => handleUpdate('persona', e.target.value)} className=\"w-full mt-1 p-2 bg-surface border rounded h-24\"/></div>\n                        <div><label className=\"font-bold\">Rules (one per line)</label><textarea value={activePersonality.rules.join('\\n')} onChange={e => handleUpdate('rules', e.target.value.split('\\n'))} className=\"w-full mt-1 p-2 bg-surface border rounded h-32\"/></div>\n                        <div><label className=\"font-bold\">Output Format</label><select value={activePersonality.outputFormat} onChange={e => handleUpdate('outputFormat', e.target.value)} className=\"w-full mt-1 p-2 bg-surface border rounded\"><option>markdown</option><option>json</option><option>text</option></select></div>\n                        <div>\n                            <h3 className=\"font-bold mb-2\">Examples</h3>\n                            {activePersonality.exampleIO.map((ex, i) => (\n                                <div key={i} className=\"grid grid-cols-2 gap-2 mb-2 p-2 border rounded bg-surface\">\n                                    <textarea placeholder=\"User Input\" value={ex.input} onChange={e => handleUpdate('exampleIO', activePersonality.exampleIO.map((item, idx) => idx === i ? {...item, input: e.target.value} : item))} className=\"h-20 p-1 bg-background border rounded\"/>\n                                    <textarea placeholder=\"Model Output\" value={ex.output} onChange={e => handleUpdate('exampleIO', activePersonality.exampleIO.map((item, idx) => idx === i ? {...item, output: e.target.value} : item))} className=\"h-20 p-1 bg-background border rounded\"/>\n                                </div>\n                            ))}\n                            <button onClick={() => handleUpdate('exampleIO', [...activePersonality.exampleIO, {input: '', output: ''}])} className=\"text-sm text-primary\">+ Add Example</button>\n                        </div>\n                    </div>\n                    {/* Testbed */}\n                    <div className=\"bg-background p-4 flex flex-col\">\n                        <h2 className=\"text-lg font-bold mb-2 border-b pb-2\">Live Testbed</h2>\n                        <div className=\"flex-grow overflow-y-auto space-y-4 pr-2\">\n                           {chatHistory.map((msg, i) => (\n                               <div key={i} className={`p-3 rounded-lg ${msg.role === 'user' ? 'bg-primary/10' : 'bg-surface'}`}>\n                                    <strong className=\"capitalize\">{msg.role}</strong>\n                                    <MarkdownRenderer content={msg.content} />\n                               </div>\n                           ))}\n                           {isStreaming && <div className=\"flex justify-center\"><LoadingSpinner/></div>}\n                        </div>\n                        <div className=\"flex gap-2 mt-4\">\n                            <input value={testbedInput} onChange={e => setTestbedInput(e.target.value)} onKeyDown={e => e.key === 'Enter' && handleTestbedSend()} className=\"flex-grow p-2 bg-surface border rounded\" placeholder=\"Test your AI...\"/>\n                            <button onClick={handleTestbedSend} disabled={isStreaming} className=\"btn-primary px-4\">Send</button>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"flex-1 flex items-center justify-center text-text-secondary\">Select or create a personality to begin.</div>\n            )}\n        </div>\n    );\n};"],"names":["defaultNewPrompt","AiPersonalityForge","personalities","setPersonalities","useAiPersonalities","activeId","setActiveId","useState","addNotification","useNotification","fileInputRef","useRef","testbedInput","setTestbedInput","chatHistory","setChatHistory","isStreaming","setIsStreaming","activePersonality","p","useEffect","handleUpdate","field","value","updated","handleAddNew","newId","newPersonality","handleDelete","id","handleTestbedSend","systemInstruction","formatSystemPromptToString","newHistory","stream","streamContent","fullResponse","prev","chunk","e","errorMsg","handleExport","downloadJson","handleImport","file","reader","event","imported","jsxs","jsx","TrashIcon","PlusIcon","ArrowUpOnSquareIcon","ArrowDownTrayIcon","ex","i","item","idx","msg","MarkdownRenderer","LoadingSpinner"],"mappings":"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"}