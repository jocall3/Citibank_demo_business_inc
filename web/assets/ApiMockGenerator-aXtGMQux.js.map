// Copyright James Burvel Oâ€™Callaghan III
// President Citibank Demo Business Inc.

{"version":3,"file":"ApiMockGenerator-aXtGMQux.js","sources":["../../services/mocking/mockServer.ts","../../components/features/ApiMockGenerator.tsx"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n\nconst SERVICE_WORKER_URL = '/mock-service-worker.js';\nlet registration: ServiceWorkerRegistration | null = null;\n\nexport const startMockServer = (): Promise<void> => {\n    return new Promise(async (resolve, reject) => {\n        if (!('serviceWorker' in navigator)) {\n            return reject(new Error('Service workers are not supported in this browser.'));\n        }\n        \n        try {\n            registration = await navigator.serviceWorker.register(SERVICE_WORKER_URL);\n            \n            if (registration.installing) {\n                registration.installing.addEventListener('statechange', () => {\n                    if (registration.installing?.state === 'installed') {\n                        // The new worker is installed, now wait for it to activate\n                    }\n                });\n            }\n\n            if (registration.active) {\n                 console.log('Mock Service Worker already active.');\n                 return resolve();\n            }\n\n            // Wait for the worker to become active\n            await navigator.serviceWorker.ready;\n            console.log('Mock Service Worker registered and ready with scope:', registration.scope);\n            resolve();\n            \n        } catch (error) {\n            console.error('Mock Service Worker registration failed:', error);\n            reject(new Error('Could not start mock server.'));\n        }\n    });\n};\n\nexport const stopMockServer = async (): Promise<void> => {\n    const reg = await navigator.serviceWorker.getRegistration();\n    if (reg) {\n        await reg.unregister();\n        registration = null;\n        console.log('Mock Service Worker unregistered.');\n    }\n};\n\nexport const isMockServerRunning = (): boolean => {\n    // Check registration and controller status to determine if server is active.\n    return !!registration && !!navigator.serviceWorker.controller;\n};\n\ninterface MockRoute {\n    path: string; // e.g., /api/users/*\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n    response: {\n        status: number;\n        body: any;\n        headers?: Record<string, string>;\n    }\n}\n\nexport const setMockRoutes = (routes: MockRoute[]): void => {\n    if (navigator.serviceWorker.controller) {\n        navigator.serviceWorker.controller.postMessage({\n            type: 'SET_ROUTES',\n            routes\n        });\n        console.log('Mock routes sent to service worker:', routes);\n    } else {\n        console.warn('Mock server is not active. Routes were not set.');\n    }\n};","import React, { useState, useEffect, useCallback } from 'react';\nimport { generateMockData } from '../../services/aiService.ts';\nimport { startMockServer, stopMockServer, setMockRoutes, isMockServerRunning } from '../../services/mocking/mockServer.ts';\nimport { saveMockCollection, getAllMockCollections } from '../../services/mocking/db.ts';\nimport { ServerStackIcon, SparklesIcon, PlusIcon } from '../icons.tsx';\nimport { LoadingSpinner } from '../shared/index.tsx';\n\ninterface MockCollection {\n    id: string;\n    schemaDescription: string;\n    data: any[];\n}\n\ninterface MockRoute {\n    id: number;\n    path: string;\n    method: 'GET' | 'POST';\n    collectionId: string;\n}\n\nconst exampleSchema = \"a user with an id, name, email, and a nested address object containing a city and country\";\n\nexport const ApiMockGenerator: React.FC = () => {\n    const [schema, setSchema] = useState(exampleSchema);\n    const [count, setCount] = useState(5);\n    const [collectionName, setCollectionName] = useState('users');\n    const [collections, setCollections] = useState<MockCollection[]>([]);\n    const [generatedData, setGeneratedData] = useState<any[] | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isServerLoading, setIsServerLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [isServerRunning, setIsServerRunning] = useState(isMockServerRunning());\n    const [routes, setRoutes] = useState<MockRoute[]>([{ id: 1, path: '/api/users', method: 'GET', collectionId: 'users' }]);\n\n    useEffect(() => {\n        const loadCollections = async () => {\n            const storedCollections = await getAllMockCollections();\n            setCollections(storedCollections);\n        };\n        loadCollections();\n    }, []);\n\n    const handleGenerate = async () => {\n        if (!schema.trim() || !collectionName.trim()) {\n            setError('Schema description and collection name are required.');\n            return;\n        }\n        setIsLoading(true);\n        setError('');\n        try {\n            const data = await generateMockData(schema, count);\n            setGeneratedData(data);\n            const collectionId = collectionName.toLowerCase().replace(/\\s/g, '-');\n            await saveMockCollection({ id: collectionId, schemaDescription: schema, data });\n            setCollections(await getAllMockCollections());\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to generate data.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleServerToggle = async () => {\n        setIsServerLoading(true);\n        if (isServerRunning) {\n            await stopMockServer();\n            setIsServerRunning(false);\n        } else {\n            try {\n                await startMockServer();\n                setIsServerRunning(true);\n                updateRoutesOnServer();\n            } catch (err) {\n                setError(err instanceof Error ? err.message : 'Could not start server.');\n            }\n        }\n        setIsServerLoading(false);\n    };\n\n    const updateRoutesOnServer = useCallback(() => {\n        const mockRoutes = routes.map(route => {\n            const collection = collections.find(c => c.id === route.collectionId);\n            return {\n                path: route.path,\n                method: route.method,\n                response: {\n                    status: 200,\n                    body: collection ? collection.data : { message: `No data found for collection '${route.collectionId}'.` }\n                }\n            };\n        });\n        setMockRoutes(mockRoutes as any);\n    }, [routes, collections]);\n\n\n    useEffect(() => {\n        if (isServerRunning) {\n            updateRoutesOnServer();\n        }\n    }, [routes, collections, isServerRunning, updateRoutesOnServer]);\n\n    const handleRouteUpdate = (id: number, field: keyof MockRoute, value: string) => {\n        setRoutes(routes.map(r => r.id === id ? { ...r, [field]: value } : r));\n    };\n\n    const handleAddRoute = () => {\n        const newRoute: MockRoute = {\n            id: Date.now(),\n            path: '/api/new-route',\n            method: 'GET',\n            collectionId: collections.length > 0 ? collections[0].id : ''\n        };\n        setRoutes([...routes, newRoute]);\n    };\n    \n    const getServerStatusText = () => {\n        if (isServerLoading) return 'Starting...';\n        return isServerRunning ? 'Server Running' : 'Server Stopped';\n    }\n\n    return (\n        <div className=\"h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary\">\n            <header className=\"mb-6 flex justify-between items-start\">\n                <div>\n                    <h1 className=\"text-3xl font-bold flex items-center\"><ServerStackIcon /><span className=\"ml-3\">AI API Mock Server</span></h1>\n                    <p className=\"text-text-secondary mt-1\">Generate and serve mock API data locally using a service worker.</p>\n                </div>\n                <button onClick={handleServerToggle} disabled={isServerLoading} className={`px-4 py-2 rounded-md font-semibold flex items-center gap-2 ${isServerRunning ? 'bg-green-100 text-green-700' : 'bg-gray-100'}`}>\n                    <span className={`w-3 h-3 rounded-full ${isServerRunning ? 'bg-green-500' : 'bg-gray-400'} ${isServerLoading ? 'animate-pulse' : ''}`}></span>\n                    {getServerStatusText()}\n                </button>\n            </header>\n            <div className=\"flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-0\">\n                <div className=\"lg:col-span-1 flex flex-col gap-4 bg-surface p-4 border border-border rounded-lg\">\n                    <h3 className=\"text-lg font-bold\">1. Generate Data</h3>\n                    <div><label className=\"text-sm\">Describe the data schema</label><textarea value={schema} onChange={e => setSchema(e.target.value)} className=\"w-full mt-1 p-2 bg-background border border-border rounded\" rows={4}/></div>\n                    <div className=\"flex gap-2\">\n                        <div className=\"flex-grow\"><label className=\"text-sm\">Collection Name</label><input type=\"text\" value={collectionName} onChange={e => setCollectionName(e.target.value)} className=\"w-full mt-1 p-2 bg-background border border-border rounded\"/></div>\n                        <div><label className=\"text-sm\">Count</label><input type=\"number\" value={count} onChange={e => setCount(Number(e.target.value))} className=\"w-20 mt-1 p-2 bg-background border border-border rounded\"/></div>\n                    </div>\n                    <button onClick={handleGenerate} disabled={isLoading} className=\"btn-primary py-2 flex items-center justify-center gap-2\">{isLoading ? <LoadingSpinner/> : <><SparklesIcon/> Generate & Save</>}</button>\n                    {error && <p className=\"text-red-500 text-xs\">{error}</p>}\n                </div>\n\n                <div className=\"lg:col-span-2 flex flex-col gap-4 min-h-0\">\n                   <div className=\"bg-surface p-4 border border-border rounded-lg flex-grow flex flex-col min-h-0\">\n                        <h3 className=\"text-lg font-bold mb-2\">2. View Data & Configure Routes</h3>\n                        <div className=\"flex-grow grid grid-cols-2 gap-4 min-h-0\">\n                            <div className=\"overflow-y-auto\">\n                                <h4 className=\"font-semibold text-sm mb-1\">Saved Collections</h4>\n                                {collections.map(c => <div key={c.id} className=\"text-xs p-2 bg-background rounded border border-border mb-1\">{c.id} ({c.data.length} items)</div>)}\n                                <h4 className=\"font-semibold text-sm mb-1 mt-2\">Last Generated Data</h4>\n                                <pre className=\"text-xs p-2 bg-background rounded border border-border whitespace-pre-wrap\">{generatedData ? JSON.stringify(generatedData, null, 2) : 'No data generated yet.'}</pre>\n                            </div>\n                            <div className=\"overflow-y-auto\">\n                                <h4 className=\"font-semibold text-sm mb-1\">Mock Routes</h4>\n                                {routes.map((r) => (\n                                <div key={r.id} className=\"grid grid-cols-3 gap-1 items-center mb-1\">\n                                    <input type=\"text\" value={r.path} onChange={e => handleRouteUpdate(r.id, 'path', e.target.value)} className=\"col-span-2 p-1 text-xs bg-background border rounded\" />\n                                    <select value={r.collectionId} onChange={e => handleRouteUpdate(r.id, 'collectionId', e.target.value)} className=\"p-1 text-xs bg-background border rounded\">\n                                        <option value=\"\">Select Collection</option>\n                                        {collections.map(c => <option key={c.id} value={c.id}>{c.id}</option>)}\n                                    </select>\n                                </div>\n                                ))}\n                                <button onClick={handleAddRoute} className=\"text-xs mt-2 p-1 bg-gray-100 rounded hover:bg-gray-200\"><PlusIcon/></button>\n                            </div>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n    );\n};"],"names":["SERVICE_WORKER_URL","registration","startMockServer","resolve","reject","error","stopMockServer","reg","isMockServerRunning","setMockRoutes","routes","exampleSchema","ApiMockGenerator","schema","setSchema","useState","count","setCount","collectionName","setCollectionName","collections","setCollections","generatedData","setGeneratedData","isLoading","setIsLoading","isServerLoading","setIsServerLoading","setError","isServerRunning","setIsServerRunning","setRoutes","useEffect","storedCollections","getAllMockCollections","handleGenerate","data","generateMockData","collectionId","saveMockCollection","err","handleServerToggle","updateRoutesOnServer","useCallback","mockRoutes","route","collection","handleRouteUpdate","id","field","value","r","handleAddRoute","newRoute","getServerStatusText","jsxs","jsx","ServerStackIcon","e","LoadingSpinner","Fragment","SparklesIcon","c","PlusIcon"],"mappings":"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"}