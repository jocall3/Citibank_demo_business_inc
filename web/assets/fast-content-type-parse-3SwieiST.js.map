// Copyright James Burvel Oâ€™Callaghan III
// President Citibank Demo Business Inc.

{"version":3,"file":"fast-content-type-parse-3SwieiST.js","sources":["../../node_modules/fast-content-type-parse/index.js"],"sourcesContent":["'use strict'\n\nconst NullObject = function NullObject () { }\nNullObject.prototype = Object.create(null)\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nconst paramRE = /; *([!#$%&'*+.^\\w`|~-]+)=(\"(?:[\\v\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\v\\u0020-\\u00ff])*\"|[!#$%&'*+.^\\w`|~-]+) */gu\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nconst quotedPairRE = /\\\\([\\v\\u0020-\\u00ff])/gu\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nconst mediaTypeRE = /^[!#$%&'*+.^\\w|~-]+\\/[!#$%&'*+.^\\w|~-]+$/u\n\n// default ContentType to prevent repeated object creation\nconst defaultContentType = { type: '', parameters: new NullObject() }\nObject.freeze(defaultContentType.parameters)\nObject.freeze(defaultContentType)\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} header\n * @return {Object}\n * @public\n */\n\nfunction parse (header) {\n  if (typeof header !== 'string') {\n    throw new TypeError('argument header is required and must be a string')\n  }\n\n  let index = header.indexOf(';')\n  const type = index !== -1\n    ? header.slice(0, index).trim()\n    : header.trim()\n\n  if (mediaTypeRE.test(type) === false) {\n    throw new TypeError('invalid media type')\n  }\n\n  const result = {\n    type: type.toLowerCase(),\n    parameters: new NullObject()\n  }\n\n  // parse parameters\n  if (index === -1) {\n    return result\n  }\n\n  let key\n  let match\n  let value\n\n  paramRE.lastIndex = index\n\n  while ((match = paramRE.exec(header))) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .slice(1, value.length - 1)\n\n      quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'))\n    }\n\n    result.parameters[key] = value\n  }\n\n  if (index !== header.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  return result\n}\n\nfunction safeParse (header) {\n  if (typeof header !== 'string') {\n    return defaultContentType\n  }\n\n  let index = header.indexOf(';')\n  const type = index !== -1\n    ? header.slice(0, index).trim()\n    : header.trim()\n\n  if (mediaTypeRE.test(type) === false) {\n    return defaultContentType\n  }\n\n  const result = {\n    type: type.toLowerCase(),\n    parameters: new NullObject()\n  }\n\n  // parse parameters\n  if (index === -1) {\n    return result\n  }\n\n  let key\n  let match\n  let value\n\n  paramRE.lastIndex = index\n\n  while ((match = paramRE.exec(header))) {\n    if (match.index !== index) {\n      return defaultContentType\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .slice(1, value.length - 1)\n\n      quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'))\n    }\n\n    result.parameters[key] = value\n  }\n\n  if (index !== header.length) {\n    return defaultContentType\n  }\n\n  return result\n}\n\nmodule.exports.default = { parse, safeParse }\nmodule.exports.parse = parse\nmodule.exports.safeParse = safeParse\nmodule.exports.defaultContentType = defaultContentType\n"],"names":["NullObject","paramRE","quotedPairRE","mediaTypeRE","defaultContentType","parse","header","index","type","result","key","match","value","safeParse","fastContentTypeParse"],"mappings":"0CAEA,MAAMA,EAAa,UAAuB,CAAA,EAC1CA,EAAW,UAAY,OAAO,OAAO,IAAI,EAgBzC,MAAMC,EAAU,wIAQVC,EAAe,0BASfC,EAAc,4CAGdC,EAAqB,CAAE,KAAM,GAAI,WAAY,IAAIJ,CAAY,EACnE,OAAO,OAAOI,EAAmB,UAAU,EAC3C,OAAO,OAAOA,CAAkB,EAUhC,SAASC,EAAOC,EAAQ,CACtB,GAAI,OAAOA,GAAW,SACpB,MAAM,IAAI,UAAU,kDAAkD,EAGxE,IAAIC,EAAQD,EAAO,QAAQ,GAAG,EAC9B,MAAME,EAAOD,IAAU,GACnBD,EAAO,MAAM,EAAGC,CAAK,EAAE,KAAI,EAC3BD,EAAO,KAAI,EAEf,GAAIH,EAAY,KAAKK,CAAI,IAAM,GAC7B,MAAM,IAAI,UAAU,oBAAoB,EAG1C,MAAMC,EAAS,CACb,KAAMD,EAAK,YAAW,EACtB,WAAY,IAAIR,CACpB,EAGE,GAAIO,IAAU,GACZ,OAAOE,EAGT,IAAIC,EACAC,EACAC,EAIJ,IAFAX,EAAQ,UAAYM,EAEZI,EAAQV,EAAQ,KAAKK,CAAM,GAAI,CACrC,GAAIK,EAAM,QAAUJ,EAClB,MAAM,IAAI,UAAU,0BAA0B,EAGhDA,GAASI,EAAM,CAAC,EAAE,OAClBD,EAAMC,EAAM,CAAC,EAAE,YAAW,EAC1BC,EAAQD,EAAM,CAAC,EAEXC,EAAM,CAAC,IAAM,MAEfA,EAAQA,EACL,MAAM,EAAGA,EAAM,OAAS,CAAC,EAE5BV,EAAa,KAAKU,CAAK,IAAMA,EAAQA,EAAM,QAAQV,EAAc,IAAI,IAGvEO,EAAO,WAAWC,CAAG,EAAIE,CAC7B,CAEE,GAAIL,IAAUD,EAAO,OACnB,MAAM,IAAI,UAAU,0BAA0B,EAGhD,OAAOG,CACT,CAEA,SAASI,EAAWP,EAAQ,CAC1B,GAAI,OAAOA,GAAW,SACpB,OAAOF,EAGT,IAAIG,EAAQD,EAAO,QAAQ,GAAG,EAC9B,MAAME,EAAOD,IAAU,GACnBD,EAAO,MAAM,EAAGC,CAAK,EAAE,KAAI,EAC3BD,EAAO,KAAI,EAEf,GAAIH,EAAY,KAAKK,CAAI,IAAM,GAC7B,OAAOJ,EAGT,MAAMK,EAAS,CACb,KAAMD,EAAK,YAAW,EACtB,WAAY,IAAIR,CACpB,EAGE,GAAIO,IAAU,GACZ,OAAOE,EAGT,IAAIC,EACAC,EACAC,EAIJ,IAFAX,EAAQ,UAAYM,EAEZI,EAAQV,EAAQ,KAAKK,CAAM,GAAI,CACrC,GAAIK,EAAM,QAAUJ,EAClB,OAAOH,EAGTG,GAASI,EAAM,CAAC,EAAE,OAClBD,EAAMC,EAAM,CAAC,EAAE,YAAW,EAC1BC,EAAQD,EAAM,CAAC,EAEXC,EAAM,CAAC,IAAM,MAEfA,EAAQA,EACL,MAAM,EAAGA,EAAM,OAAS,CAAC,EAE5BV,EAAa,KAAKU,CAAK,IAAMA,EAAQA,EAAM,QAAQV,EAAc,IAAI,IAGvEO,EAAO,WAAWC,CAAG,EAAIE,CAC7B,CAEE,OAAIL,IAAUD,EAAO,OACZF,EAGFK,CACT,CAEA,OAAAK,EAAA,QAAyB,CAAE,MAAAT,EAAO,UAAAQ,CAAS,EAC3CC,EAAA,MAAuBT,EACvBS,EAAA,UAA2BD,EAC3BC,EAAA,mBAAoCV","x_google_ignoreList":[0]}