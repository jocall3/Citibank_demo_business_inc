{"version":3,"file":"CodeReviewBot-DsuEl5JE.js","sources":["../../components/features/CodeReviewBot.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { reviewCodeStream } from '../../services/index.ts';\nimport { useAiPersonalities } from '../../hooks/useAiPersonalities.ts';\nimport { formatSystemPromptToString } from '../../utils/promptUtils.ts';\nimport { CpuChipIcon } from '../icons.tsx';\nimport { LoadingSpinner } from '../shared/index.tsx';\nimport { MarkdownRenderer } from '../shared/index.tsx';\n\nconst exampleCode = `function UserList(users) {\n  if (users.length = 0) {\n    return \"no users\";\n  } else {\n    return (\n      users.map(u => {\n        return <li>{u.name}</li>\n      })\n    )\n  }\n}`;\n\nexport const CodeReviewBot: React.FC = () => {\n    const [code, setCode] = useState<string>(exampleCode);\n    const [review, setReview] = useState<string>('');\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n    const [personalities] = useAiPersonalities();\n    const [selectedPersonalityId, setSelectedPersonalityId] = useState<string>('default');\n\n    const handleGenerate = useCallback(async () => {\n        if (!code.trim()) {\n            setError('Please enter some code to review.');\n            return;\n        }\n        setIsLoading(true);\n        setError('');\n        setReview('');\n\n        let systemInstruction: string | undefined = undefined;\n        if (selectedPersonalityId !== 'default') {\n            const personality = personalities.find(p => p.id === selectedPersonalityId);\n            if (personality) {\n                systemInstruction = formatSystemPromptToString(personality);\n            }\n        }\n\n        try {\n            const stream = reviewCodeStream(code, systemInstruction);\n            let fullResponse = '';\n            for await (const chunk of stream) {\n                fullResponse += chunk;\n                setReview(fullResponse);\n            }\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';\n            setError(`Failed to get review: ${errorMessage}`);\n        } finally {\n            setIsLoading(false);\n        }\n    }, [code, selectedPersonalityId, personalities]);\n\n    return (\n        <div className=\"h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary\">\n            <header className=\"mb-6\">\n                <h1 className=\"text-3xl font-bold flex items-center\">\n                    <CpuChipIcon />\n                    <span className=\"ml-3\">AI Code Review Bot</span>\n                </h1>\n                <p className=\"text-text-secondary mt-1\">Get an automated code review from Gemini.</p>\n            </header>\n            <div className=\"flex-grow flex flex-col gap-4 min-h-0\">\n                <div className=\"flex flex-col flex-1 min-h-0\">\n                    <label htmlFor=\"code-input\" className=\"text-sm font-medium text-text-secondary mb-2\">Code to Review</label>\n                    <textarea\n                        id=\"code-input\"\n                        value={code}\n                        onChange={(e) => setCode(e.target.value)}\n                        placeholder=\"Paste your code here...\"\n                        className=\"flex-grow p-4 bg-surface border border-border rounded-md resize-none font-mono text-sm\"\n                    />\n                </div>\n                 <div className=\"flex-shrink-0 flex items-center justify-center gap-4\">\n                     <div className=\"w-full max-w-xs\">\n                        <label htmlFor=\"personality-select\" className=\"text-sm font-medium text-text-secondary\">Reviewer Personality</label>\n                        <select\n                            id=\"personality-select\"\n                            value={selectedPersonalityId}\n                            onChange={e => setSelectedPersonalityId(e.target.value)}\n                            className=\"w-full mt-1 p-2 bg-surface border border-border rounded-md text-sm\"\n                        >\n                            <option value=\"default\">Default</option>\n                            {personalities.map(p => (\n                                <option key={p.id} value={p.id}>{p.name}</option>\n                            ))}\n                        </select>\n                     </div>\n                    <button\n                        onClick={handleGenerate}\n                        disabled={isLoading}\n                        className=\"btn-primary self-end h-[42px] w-full max-w-xs flex items-center justify-center px-6 py-3\"\n                    >\n                        {isLoading ? <LoadingSpinner /> : 'Request Review'}\n                    </button>\n                </div>\n                <div className=\"flex flex-col flex-1 min-h-0\">\n                    <label className=\"text-sm font-medium text-text-secondary mb-2\">AI Feedback</label>\n                    <div className=\"flex-grow p-4 bg-background border border-border rounded-md overflow-y-auto\">\n                        {isLoading && !review && <div className=\"flex items-center justify-center h-full\"><LoadingSpinner /></div>}\n                        {error && <p className=\"text-red-500\">{error}</p>}\n                        {review && <MarkdownRenderer content={review} />}\n                         {!isLoading && !review && !error && <div className=\"text-text-secondary h-full flex items-center justify-center\">Review will appear here.</div>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};"],"names":["exampleCode","CodeReviewBot","code","setCode","useState","review","setReview","isLoading","setIsLoading","error","setError","personalities","useAiPersonalities","selectedPersonalityId","setSelectedPersonalityId","handleGenerate","useCallback","systemInstruction","personality","p","formatSystemPromptToString","stream","reviewCodeStream","fullResponse","chunk","err","errorMessage","jsxs","jsx","CpuChipIcon","e","LoadingSpinner","MarkdownRenderer"],"mappings":"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"}