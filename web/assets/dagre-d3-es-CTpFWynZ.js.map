{"version":3,"file":"dagre-d3-es-CTpFWynZ.js","sources":["../../node_modules/dagre-d3-es/src/graphlib/graph.js","../../node_modules/dagre-d3-es/src/dagre/data/list.js","../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../../node_modules/dagre-d3-es/src/dagre/acyclic.js","../../node_modules/dagre-d3-es/src/dagre/util.js","../../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../../node_modules/dagre-d3-es/src/dagre/normalize.js","../../node_modules/dagre-d3-es/src/dagre/rank/util.js","../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../../node_modules/dagre-d3-es/src/dagre/rank/index.js","../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../../node_modules/dagre-d3-es/src/dagre/order/sort.js","../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../../node_modules/dagre-d3-es/src/dagre/order/index.js","../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../../node_modules/dagre-d3-es/src/dagre/position/bk.js","../../node_modules/dagre-d3-es/src/dagre/position/index.js","../../node_modules/dagre-d3-es/src/dagre/layout.js","../../node_modules/dagre-d3-es/src/dagre-js/util.js","../../node_modules/dagre-d3-es/src/dagre-js/arrows.js","../../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","../../node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js","../../node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js","../../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js","../../node_modules/dagre-d3-es/src/dagre-js/create-clusters.js","../../node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js","../../node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js","../../node_modules/dagre-d3-es/src/dagre-js/create-nodes.js","../../node_modules/dagre-d3-es/src/dagre-js/position-clusters.js","../../node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js","../../node_modules/dagre-d3-es/src/dagre-js/position-nodes.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js","../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js","../../node_modules/dagre-d3-es/src/dagre-js/shapes.js","../../node_modules/dagre-d3-es/src/dagre-js/render.js","../../node_modules/dagre-d3-es/src/graphlib/json.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","import * as util from './util.js';\n\nexport { arrows, setArrows };\n\nvar arrows = {\n  normal,\n  vee,\n  undirected,\n};\n\nfunction setArrows(value) {\n  arrows = value;\n}\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 L 4 5 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 5 L 10 5')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n","import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import * as util from '../util.js';\n\nexport { addSVGLabel };\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","import * as util from '../util.js';\n\nexport { addTextLabel };\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append('text');\n\n  var lines = processEscapeSequences(node.label).split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append('tspan')\n      .attr('xml:space', 'preserve')\n      .attr('dy', '1em')\n      .attr('x', '1')\n      .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = '';\n  var escaped = false;\n  var ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch (ch) {\n        case 'n':\n          newText += '\\n';\n          break;\n        default:\n          newText += ch;\n      }\n      escaped = false;\n    } else if (ch === '\\\\') {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","import { addHtmlLabel } from './add-html-label.js';\nimport { addSVGLabel } from './add-svg-label.js';\nimport { addTextLabel } from './add-text-label.js';\n\nexport { addLabel };\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append('g');\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === 'svg') {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== 'string' || node.labelType === 'html') {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch (location) {\n    case 'top':\n      y = -node.height / 2;\n      break;\n    case 'bottom':\n      y = node.height / 2 - labelBBox.height;\n      break;\n    default:\n      y = -labelBBox.height / 2;\n  }\n  labelSvg.attr('transform', 'translate(' + -labelBBox.width / 2 + ',' + y + ')');\n\n  return labelSvg;\n}\n","import * as d3 from 'd3';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createClusters, setCreateClusters };\n\nvar createClusters = function (selection, g) {\n  var clusters = g.nodes().filter(function (v) {\n    return util.isSubgraph(g, v);\n  });\n  var svgClusters = selection.selectAll('g.cluster').data(clusters, function (v) {\n    return v;\n  });\n\n  util.applyTransition(svgClusters.exit(), g).style('opacity', 0).remove();\n\n  var enterSelection = svgClusters\n    .enter()\n    .append('g')\n    .attr('class', 'cluster')\n    .attr('id', function (v) {\n      var node = g.node(v);\n      return node.id;\n    })\n    .style('opacity', 0)\n    .each(function (v) {\n      var node = g.node(v);\n      var thisGroup = d3.select(this);\n      d3.select(this).append('rect');\n      var labelGroup = thisGroup.append('g').attr('class', 'label');\n      addLabel(labelGroup, node, node.clusterLabelPos);\n    });\n\n  svgClusters = svgClusters.merge(enterSelection);\n\n  svgClusters = util.applyTransition(svgClusters, g).style('opacity', 1);\n\n  svgClusters.selectAll('rect').each(function (c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  return svgClusters;\n};\n\nfunction setCreateClusters(value) {\n  createClusters = value;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createEdgeLabels, setCreateEdgeLabels };\n\nlet createEdgeLabels = function (selection, g) {\n  var svgEdgeLabels = selection\n    .selectAll('g.edgeLabel')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  svgEdgeLabels.exit().remove();\n  svgEdgeLabels.enter().append('g').classed('edgeLabel', true).style('opacity', 0);\n\n  svgEdgeLabels = selection.selectAll('g.edgeLabel');\n\n  svgEdgeLabels.each(function (e) {\n    var root = d3.select(this);\n    root.select('.label').remove();\n    var edge = g.edge(e);\n    var label = addLabel(root, g.edge(e), 0).classed('label', true);\n    var bbox = label.node().getBBox();\n\n    if (edge.labelId) {\n      label.attr('id', edge.labelId);\n    }\n    if (!_.has(edge, 'width')) {\n      edge.width = bbox.width;\n    }\n    if (!_.has(edge, 'height')) {\n      edge.height = bbox.height;\n    }\n  });\n\n  var exitSelection;\n\n  if (svgEdgeLabels.exit) {\n    exitSelection = svgEdgeLabels.exit();\n  } else {\n    exitSelection = svgEdgeLabels.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgEdgeLabels;\n};\n\nfunction setCreateEdgeLabels(value) {\n  createEdgeLabels = value;\n}\n","export { intersectNode };\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { intersectNode } from './intersect/intersect-node.js';\nimport * as util from './util.js';\n\nexport { createEdgePaths, setCreateEdgePaths };\n\nvar createEdgePaths = function (selection, g, arrows) {\n  var previousPaths = selection\n    .selectAll('g.edgePath')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  var newPaths = enter(previousPaths, g);\n  exit(previousPaths, g);\n\n  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;\n  util.applyTransition(svgPaths, g).style('opacity', 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function (e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr('id', edge.id);\n    }\n\n    util.applyClass(\n      domEdge,\n      edge['class'],\n      (domEdge.classed('update') ? 'update ' : '') + 'edgePath'\n    );\n  });\n\n  svgPaths.selectAll('path.path').each(function (e) {\n    var edge = g.edge(e);\n    edge.arrowheadId = _.uniqueId('arrowhead');\n\n    var domEdge = d3\n      .select(this)\n      .attr('marker-end', function () {\n        return 'url(' + makeFragmentRef(location.href, edge.arrowheadId) + ')';\n      })\n      .style('fill', 'none');\n\n    util.applyTransition(domEdge, g).attr('d', function (e) {\n      return calcPoints(g, e);\n    });\n\n    util.applyStyle(domEdge, edge.style);\n  });\n\n  svgPaths.selectAll('defs *').remove();\n  svgPaths.selectAll('defs').each(function (e) {\n    var edge = g.edge(e);\n    var arrowhead = arrows[edge.arrowhead];\n    arrowhead(d3.select(this), edge.arrowheadId, edge, 'arrowhead');\n  });\n\n  return svgPaths;\n};\n\nfunction setCreateEdgePaths(value) {\n  createEdgePaths = value;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split('#')[0];\n  return baseUrl + '#' + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e);\n  var tail = g.node(e.v);\n  var head = g.node(e.w);\n  var points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  // @ts-expect-error\n  var line = (d3.line || d3.svg.line)()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    });\n\n  (line.curve || line.interpolate)(edge.curve);\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox();\n  var matrix = elem.ownerSVGElement\n    .getScreenCTM()\n    .inverse()\n    .multiply(elem.getScreenCTM())\n    .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter().append('g').attr('class', 'edgePath').style('opacity', 0);\n  svgPathsEnter\n    .append('path')\n    .attr('class', 'path')\n    .attr('d', function (e) {\n      var edge = g.edge(e);\n      var sourceElem = g.node(e.v).elem;\n      var points = _.range(edge.points.length).map(function () {\n        return getCoords(sourceElem);\n      });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append('defs');\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g).style('opacity', 0).remove();\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createNodes, setCreateNodes };\n\nvar createNodes = function (selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function (v) {\n    return !util.isSubgraph(g, v);\n  });\n  var svgNodes = selection\n    .selectAll('g.node')\n    .data(simpleNodes, function (v) {\n      return v;\n    })\n    .classed('update', true);\n\n  svgNodes.exit().remove();\n\n  svgNodes.enter().append('g').attr('class', 'node').style('opacity', 0);\n\n  svgNodes = selection.selectAll('g.node');\n\n  svgNodes.each(function (v) {\n    var node = g.node(v);\n    var thisGroup = d3.select(this);\n    util.applyClass(\n      thisGroup,\n      node['class'],\n      (thisGroup.classed('update') ? 'update ' : '') + 'node'\n    );\n\n    thisGroup.select('g.label').remove();\n    var labelGroup = thisGroup.append('g').attr('class', 'label');\n    var labelDom = addLabel(labelGroup, node);\n    var shape = shapes[node.shape];\n    var bbox = _.pick(labelDom.node().getBBox(), 'width', 'height');\n\n    node.elem = this;\n\n    if (node.id) {\n      thisGroup.attr('id', node.id);\n    }\n    if (node.labelId) {\n      labelGroup.attr('id', node.labelId);\n    }\n\n    if (_.has(node, 'width')) {\n      bbox.width = node.width;\n    }\n    if (_.has(node, 'height')) {\n      bbox.height = node.height;\n    }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\n      'transform',\n      'translate(' +\n        (node.paddingLeft - node.paddingRight) / 2 +\n        ',' +\n        (node.paddingTop - node.paddingBottom) / 2 +\n        ')'\n    );\n\n    var root = d3.select(this);\n    root.select('.label-container').remove();\n    var shapeSvg = shape(root, bbox, node).classed('label-container', true);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  var exitSelection;\n\n  if (svgNodes.exit) {\n    exitSelection = svgNodes.exit();\n  } else {\n    exitSelection = svgNodes.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgNodes;\n};\n\nfunction setCreateNodes(value) {\n  createNodes = value;\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionClusters };\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n\n  util\n    .applyTransition(created.selectAll('rect'), g)\n    .attr('width', function (v) {\n      return g.node(v).width;\n    })\n    .attr('height', function (v) {\n      return g.node(v).height;\n    })\n    .attr('x', function (v) {\n      var node = g.node(v);\n      return -node.width / 2;\n    })\n    .attr('y', function (v) {\n      var node = g.node(v);\n      return -node.height / 2;\n    });\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { positionEdgeLabels };\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, 'x') ? 'translate(' + edge.x + ',' + edge.y + ')' : '';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionNodes };\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","export { intersectEllipse };\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs((rx * ry * px) / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs((rx * ry * py) / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return { x: cx + dx, y: cy + dy };\n}\n","import { intersectEllipse } from './intersect-ellipse.js';\n\nexport { intersectCircle };\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","export { intersectLine };\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2, r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = p2.x * p1.y - p1.x * p2.y;\n\n  // Compute r3 and r4.\n  r3 = a1 * q1.x + b1 * q1.y + c1;\n  r4 = a1 * q2.x + b1 * q2.y + c1;\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = q2.x * q1.y - q1.x * q2.y;\n\n  // Compute r1 and r2\n  r1 = a2 * p1.x + b2 * p1.y + c2;\n  r2 = a2 * p2.x + b2 * p2.y + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = b1 * c2 - b2 * c1;\n  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","import { intersectLine } from './intersect-line.js';\n\nexport { intersectPolygon };\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n","export { intersectRect };\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n","import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\n\nexport { shapes, setShapes };\n\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond,\n};\n\nfunction setShapes(value) {\n  shapes = value;\n}\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('width', bbox.width)\n    .attr('height', bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent\n    .insert('ellipse', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('rx', rx)\n    .attr('ry', ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent\n    .insert('circle', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('r', r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x: 0, y: -h },\n    { x: -w, y: 0 },\n    { x: 0, y: h },\n    { x: w, y: 0 },\n  ];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr(\n    'points',\n    points\n      .map(function (p) {\n        return p.x + ',' + p.y;\n      })\n      .join(' ')\n  );\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { layout } from '../dagre/index.js';\nimport { arrows, setArrows } from './arrows.js';\nimport { createClusters, setCreateClusters } from './create-clusters.js';\nimport { createEdgeLabels, setCreateEdgeLabels } from './create-edge-labels.js';\nimport { createEdgePaths, setCreateEdgePaths } from './create-edge-paths.js';\nimport { createNodes, setCreateNodes } from './create-nodes.js';\nimport { positionClusters } from './position-clusters.js';\nimport { positionEdgeLabels } from './position-edge-labels.js';\nimport { positionNodes } from './position-nodes.js';\nimport { shapes, setShapes } from './shapes.js';\n\nexport { render };\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var fn = function (svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, 'output');\n    var clustersGroup = createOrSelectGroup(outputGroup, 'clusters');\n    var edgePathsGroup = createOrSelectGroup(outputGroup, 'edgePaths');\n    var edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, 'edgeLabels'), g);\n    var nodes = createNodes(createOrSelectGroup(outputGroup, 'nodes'), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function (value) {\n    if (!arguments.length) return createNodes;\n    setCreateNodes(value);\n    return fn;\n  };\n\n  fn.createClusters = function (value) {\n    if (!arguments.length) return createClusters;\n    setCreateClusters(value);\n    return fn;\n  };\n\n  fn.createEdgeLabels = function (value) {\n    if (!arguments.length) return createEdgeLabels;\n    setCreateEdgeLabels(value);\n    return fn;\n  };\n\n  fn.createEdgePaths = function (value) {\n    if (!arguments.length) return createEdgePaths;\n    setCreateEdgePaths(value);\n    return fn;\n  };\n\n  fn.shapes = function (value) {\n    if (!arguments.length) return shapes;\n    setShapes(value);\n    return fn;\n  };\n\n  fn.arrows = function (value) {\n    if (!arguments.length) return arrows;\n    setArrows(value);\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: 'rect',\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: 'normal',\n  curve: d3.curveLinear,\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function (v) {\n    var node = g.node(v);\n    if (!_.has(node, 'label') && !g.children(v).length) {\n      node.label = v;\n    }\n\n    if (_.has(node, 'paddingX')) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX,\n      });\n    }\n\n    if (_.has(node, 'paddingY')) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY,\n      });\n    }\n\n    if (_.has(node, 'padding')) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding,\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each(['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'], function (k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, 'width')) {\n      node._prevWidth = node.width;\n    }\n    if (_.has(node, 'height')) {\n      node._prevHeight = node.height;\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, 'label')) {\n      edge.label = '';\n    }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, '_prevWidth')) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, '_prevHeight')) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select('g.' + name);\n  if (selection.empty()) {\n    selection = root.append('g').attr('class', name);\n  }\n  return selection;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n"],"names":["DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","Graph","opts","_.has","_.constant","label","newDefault","_.isFunction","_.keys","self","_.filter","v","_.isEmpty","vs","value","args","_.each","removeEdge","e","child","parent","_.isUndefined","ancestor","children","predsV","sucsV","preds","_.union","neighbors","filter","copy","parents","findParent","_.values","_.reduce","w","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","incrementOrInitEntry","edgeObjToId","edge","decrementOrRemoveEntry","u","inV","edges","outV","inEdges","map","k","isDirected","v_","w_","tmp","List","sentinel","entry","unlink","strs","curr","filterOutLinks","DEFAULT_WEIGHT_FN","greedyFAS","g","weightFn","state","buildState","results","doGreedyFAS","_.flatten","_.map","buckets","zeroIdx","sources","sinks","removeNode","i","collectPredecessors","_.forEach","weight","uEntry","assignBucket","wEntry","fasGraph","maxIn","maxOut","prevWeight","edgeWeight","_.range","run","fas","dfsFAS","_.uniqueId","stack","visited","dfs","undo","forwardName","addDummyNode","type","attrs","simplify","simplified","simpleLabel","asNonCompoundGraph","intersectRect","rect","point","x","y","dx","dy","h","sx","sy","buildLayerMatrix","layering","maxRank","node","rank","normalizeRanks","min","_.min","removeEmptyRanks","offset","layers","delta","nodeRankFactor","addBorderNode","prefix","order","_.max","partition","collection","fn","result","notime","addBorderSegments","prop","sg","sgNode","prev","util.addDummyNode","adjust","rankDir","swapWidthHeight","reverseY","swapXY","swapWidthHeightOne","reverseYOne","swapXYOne","normalizeEdge","vRank","wRank","edgeLabel","labelRank","dummy","origLabel","longestPath","slack","feasibleTree","start","size","tightTree","findMinSlackEdge","shiftRanks","t","edgeV","_.minBy","CycleException","_.isArray","navigation","acc","doDfs","postorder","preorder","networkSimplex","initLowLimValues","initCutValues","calcCutValue","leaveEdge","enterEdge","exchangeEdges","f","alg.postorder","assignCutValue","childLab","childIsTail","graphEdge","cutValue","isOutEdge","other","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","root","dfsAssignLowLim","nextLim","low","_.find","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","updateRanks","alg.preorder","flipped","rootLabel","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","height","nodeSep","sumWeights","top","util.addBorderNode","bottom","childNode","childTop","childBottom","thisWeight","minlen","depth","cleanup","graphLabel","addSubgraphConstraints","cg","rootPrev","prevChild","buildLayerGraph","relationship","createRootNode","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","_.zipObject","southEntries","_.sortBy","firstIndex","treeSize","index","weightSum","initOrder","simpleNodes","orderedVs","barycenter","movable","nodeU","resolveConflicts","entries","mappedEntries","entryV","entryW","sourceSet","doResolveConflicts","handleIn","vEntry","mergeEntries","handleOut","_.pick","target","source","sum","sort","biasRight","parts","util.partition","sortable","unsortable","vsIndex","compareWithBias","consumeUnsortable","last","_.last","bias","sortSubgraph","bl","br","subgraphs","barycenters","subgraphResult","mergeBarycenters","expandSubgraphs","blPred","brPred","util.maxRank","downLayerGraphs","buildLayerGraphs","upLayerGraphs","assignOrder","bestCC","best","lastBest","sweepLayerGraphs","util.buildLayerMatrix","_.cloneDeep","ranks","layerGraphs","lg","sorted","layer","parentDummyChains","postorderNums","pathData","findPath","path","lca","pathIdx","pathV","ascending","vPath","wPath","lim","findType1Conflicts","conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","prevNorthPos","nextNorthPos","southLookahead","predecessors","conflictsV","hasConflict","verticalAlignment","neighborFn","align","pos","prevIdx","ws","mp","il","horizontalCompaction","reverseSep","xs","blockG","buildBlockGraph","borderType","iterate","setXsFunc","nextNodesFunc","elem","pass1","pass2","blockGraph","sepFn","sep","vRoot","uRoot","prevMax","findSmallestWidthAlignment","xss","max","_.forIn","halfWidth","width","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","_.mapValues","balance","ignore","positionX","_.merge","adjustedLayering","inner","smallestWidth","edgeSep","position","util.asNonCompoundGraph","positionY","_.forOwn","rankSep","prevY","maxHeight","layout","time","util.notime","layoutGraph","buildLayoutGraph","runLayout","updateInputGraph","makeSpaceForEdgeLabels","removeSelfEdges","acyclic.run","nestingGraph.run","injectEdgeLabelProxies","util.removeEmptyRanks","nestingGraph.cleanup","util.normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","normalize.run","insertSelfEdges","coordinateSystem.adjust","positionSelfEdges","removeBorderNodes","normalize.undo","fixupEdgeLabelCoords","coordinateSystem.undo","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","acyclic.undo","inputGraph","inputLabel","layoutLabel","graphNumAttrs","graphDefaults","graphAttrs","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","edgeAttrs","graph","canonicalize","selectNumberAttrs","_.defaults","minX","maxX","minY","maxY","marginX","marginY","getExtremes","p","nodeV","nodeW","p1","p2","util.intersectRect","b","l","r","orderShift","selfEdge","selfNode","obj","newAttrs","isSubgraph","edgeToId","escapeId","ID_DELIM","str","applyStyle","dom","styleFn","applyClass","classFn","otherClasses","applyTransition","selection","_.isPlainObject","transition","arrows","normal","vee","undirected","setArrows","id","marker","util.applyStyle","addHtmlLabel","fo","div","client","addSVGLabel","domNode","addTextLabel","lines","processEscapeSequences","text","newText","escaped","ch","addLabel","location","labelSvg","labelBBox","createClusters","clusters","util.isSubgraph","svgClusters","util.applyTransition","enterSelection","thisGroup","d3.select","labelGroup","c","domCluster","setCreateClusters","createEdgeLabels","svgEdgeLabels","util.edgeToId","bbox","exitSelection","setCreateEdgeLabels","intersectNode","createEdgePaths","previousPaths","newPaths","enter","exit","svgPaths","domEdge","util.applyClass","d3\n      .select","makeFragmentRef","calcPoints","arrowhead","setCreateEdgePaths","url","fragmentId","baseUrl","tail","head","points","createLine","line","d3.line","d3.svg","d","getCoords","matrix","svgPathsEnter","sourceElem","svgPathExit","createNodes","shapes","svgNodes","labelDom","shape","shapeSvg","shapeBBox","setCreateNodes","positionClusters","created","translate","util\n    .applyTransition","positionEdgeLabels","positionNodes","intersectEllipse","rx","ry","cx","cy","px","py","det","intersectCircle","intersectLine","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","num","sameSign","intersectPolygon","polyPoints","x1","y1","intersections","left","intersect","q","pdx","pdy","distp","qdx","qdy","distq","ellipse","circle","diamond","setShapes","render","svg","preProcessGraph","outputGroup","createOrSelectGroup","clustersGroup","edgePathsGroup","edgeLabels","nodes","postProcessGraph","NODE_DEFAULT_ATTRS","EDGE_DEFAULT_ATTRS","d3.curveLinear","write","json","writeNodes","writeEdges","_.clone","nodeValue","edgeValue"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]}